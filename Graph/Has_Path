class Graph:
    def __init__(self,nVertices):
        self.nVertices=nVertices
        self.adjMatrix=[[0 for i in range(self.nVertices)]for j in range(self.nVertices)]
    def addEdge(self,v1,v2):
        self.adjMatrix[v1][v2]=1
        self.adjMatrix[v2][v1]=1
    def hasPathHelper(self,v1,v2,visited):
        if self.adjMatrix[v1][v2]>0:
            return True
        visited[v1]=True
        for i in range(self.nVertices):
            if self.adjMatrix[v1][i]>0 and visited[i] is False:
                isPath=self.hasPathHelper(i,v2,visited)
                if isPath:
                    return True
        return False
    def hasPath(self,v1,v2):
        visited=[False for i in range(self.nVertices)]
        return self.hasPathHelper(v1,v2,visited)

arr=[int(i) for i in input().strip().split()]
V=arr[0];E=arr[1]
g=Graph(V)
for i in range(E):
    arr=[int(j) for j in input().strip().split()]
    a=arr[0];b=arr[1]
    g.addEdge(a,b)
arr=[int(i) for i in input().strip().split()]
V1=arr[0];V2=arr[1]
isPath=g.hasPath(V1,V2)
if isPath:
    print("true")
else:
    print("false")
